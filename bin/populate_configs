#!/usr/bin/env ruby

STDOUT.sync = true

require 'digest/sha1'
require 'erb'
require 'optparse'
require 'yaml'
require 'active_record'

config = YAML.load(ERB.new(File.read('config/database.yml')).result)
ActiveRecord::Base.establish_connection(config[ENV['RAILS_ENV'] || 'test'])

start = 0
batch = 100_000
total = 1_000_000
pause = nil

ARGV.options do |o|
  o.on("-s", "--start=START", Integer) { |v| start = v }
  o.on('-b', "--batch=BATCH", Integer) { |v| batch = v }
  o.on('-c', "--total=TOTAL", Integer) { |v| total = v }
  o.on("-p", "--pause=PAUSE", Integer) { |v| pause = v.to_f / 1000 }
  o.parse!
end

names = %(request build job)
name  = ARGV.shift || fail('No model name specified (request|build|job)')
names.include?(name) or fail "model name given must be one of: #{names.join(', ')}"

Model = Class.new(ActiveRecord::Base) do
  self.table_name = "#{name}s"
  serialize :config
end

Config = Class.new(ActiveRecord::Base) do
  self.table_name = "#{name}_configs"
  serialize :config
end

scope = Model.where(config_id: nil)
scope = scope.select(:id, :repository_id, :config)
scope = scope.where('id between ? and ?', start, start + total - 1)

configs = {}

scope.find_each do |obj|
  next unless obj.config
  key = Digest::MD5.hexdigest(obj.config.inspect)

  config = configs[key]
  config ||= Config.where(repository_id: obj.repository_id, key: key).select(:id).first
  config ||= Config.create!(key: key, repository_id: obj.repository_id, config: obj.config)
  configs[key] ||= Config.new(id: config.id)

  puts "Updating #{name} id=#{obj.id} with config_id: #{config.id}"
  obj.update_attributes!(config_id: config.id)

  sleep pause if pause
end
